<!DOCTYPE html>
<html>

<head>
    <title>Home</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="group20.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat">
    <script><%- include('../static/script2.ejs'); %></script>
    <style>
        body {
            display: flex;
            flex-direction: column;
            background-color: lightgray;
            font-family: "Montserrat", serif;
        }
        <%- include('../static/group20.css'); %>
    </style>
</head>

<body>
    <div class="topheader">
        <header class="top-banner">
            <a href="" class="logo" style="margin-right: auto;">
                <img src="https://raw.githubusercontent.com/edtton/RadioStation/main/template.jpg">
            </a>
            <% if (username) { %>
             <p><%= username %></p>
            <% } %>
            <nav class="navbuttons">
                <ul>
                    <li><a href="/?username=<%= username %>" class="navbutton">Home</a></li>
                    <li><a href="/playlists?username=<%= username %>"class="navbutton">Edit Playlists</a></li>
                </ul>
            </nav>

            <input type="text" placeholder="Search for songs or DJs" class="searchbar" id="search">

            <div class="usercluster">
                <img src="https://raw.githubusercontent.com/edtton/RadioStation/main/template.jpg" id="userpfp">
                <nav class="userbuttons">
                    <button class="userbutton">
                        <a href="/producerProfile?username=<%= username %>">Profile</a>
                    </button>
                    <button class="userbutton">
                        <a href="/producerSettings?username=<%= username %>">Settings</a>
                    </button>
                    <button class="userbutton">
                        <a href="/logout">Logout</a>
                    </button>
                </nav>
            </div>
        </header>
    </div>


    <div class="upcomingsongs">
        <h2>Top Songs:</h2>
        <div class="scrollcontainer">
            <% songs.forEach(song => { %>
                <div class="songThumbnail">
                    <img src="https://raw.githubusercontent.com/edtton/RadioStation/main/template.jpg">
                    <h3><%= song.title %></h3>
                </div>
            <% }) %>
        </div>
        <br>
        <h2>Top DJs:</h2>
        <div class="djcontainer">
            <div class="DJthumbnail">
                <img src="https://raw.githubusercontent.com/edtton/RadioStation/main/template.jpg">
                <h4>DJ Name</h4>
            </div>
            <div class="DJthumbnail">
                <img src="https://raw.githubusercontent.com/edtton/RadioStation/main/template.jpg">
                <h4>DJ Name</h4>
            </div>
            <div class="DJthumbnail">
                <img src="https://raw.githubusercontent.com/edtton/RadioStation/main/template.jpg">
                <h4>DJ Name</h4>
            </div>
            <div class="DJthumbnail">
                <img src="https://raw.githubusercontent.com/edtton/RadioStation/main/template.jpg">
                <h4>DJ Name</h4>
            </div>
        </div>
    </div>

    <div class="bottomheader">
        <header class="bottom-banner">
            <div class="songdetails">
                <div class="albumimage">
                    <img src="https://raw.githubusercontent.com/edtton/RadioStation/main/template.jpg">
                </div>
                <div class="songinfo">
                    <h2>Song Title</h2>
                    <h4>Artist Name</h4>
                    <p>"Album Name"</p>
                </div>
            </div>

            <div class="songcontrols">
                <div class="songlabels">
                    <p class="left">Live Radio</p>
                    <p class="right" id="djName"></p>
                </div>
                <div class="player">
                    <audio controls id="radioPlayer">
                        <source src="https://playerservices.streamtheworld.com/api/livestream-redirect/WETAFM.mp3"
                            type=audio/mpeg>
                        Your browser does not support the audio element.
                    </audio>
                </div>
            </div>

            <div class="songactions">
                <button class="songaction" id="queueadd" onclick="addQueue()">Add to Queue</button>
                <button class="songaction" id="queueremove" disabled = true onclick="removeQueue()">Remove from Queue</button>
            </div>
        </header>
    </div>
    <script>
        let currentSongId;
    
        document.addEventListener('DOMContentLoaded', async function () {
            try {
                const response = await fetch('/getRandomSong');
                const data = await response.json();
    
                if (data && data.name && data.artist) {
                    // Update the content of the songinfo div
                    document.getElementById('songTitle').textContent = data.title;
                    document.getElementById('artistName').textContent = data.artist;
                    document.getElementById('albumName').textContent = data.album || '';
    
                    currentSongId = data._id;
                }
                else {
                    console.error('Error fetching random song:', data);
                }
            }
            catch (error) {
                console.error('Error fetching random song:', error);
            }
        });
    
        // Pass the current song's ID to addQueue when the button is clicked
        // Assume Playlist model exists and is imported

    app.post('/addToQueue', async (req, res) => {
        try {
            const username = req.session.username;
            const user = await User.findOne({ username }).exec();

            if (!user) {
                return res.status(404).json({ message: 'User not found.' });
            }

            const playlistName = 'Queue'; // Assume the playlist name is 'Queue'
            let playlist = await Playlist.findOne({ name: playlistName }).exec();

            if (!playlist) {
                // If the playlist doesn't exist, create it
                playlist = new Playlist({ name: playlistName, songs: [] });
            }

            const songId = req.body.songId;
            console.log('Received request body:', req.body.songId);

            if (playlist.songs.includes(songId)) {
                return res.status(400).json({ message: 'Song is already in Queue.' });
            } else {
                playlist.songs.push(songId);
            }

            await playlist.save();

            res.json({ message: 'Song added to Queue.' });
        } catch (error) {
            console.error('Error adding song to Queue:', error);
            res.status(500).json({ error: 'Internal Server Error' });
        }
    });

    app.post('/removeFromQueue', async (req, res) => {
        try {
            const username = req.session.username;
            const user = await User.findOne({ username }).exec();

            if (!user) {
                return res.status(404).json({ message: 'User not found.' });
            }

            const playlistName = 'Queue'; // Assume the playlist name is 'Queue'
            const playlist = await Playlist.findOne({ name: playlistName }).exec();

            if (!playlist) {
                return res.status(404).json({ message: 'Queue not found.' });
            }

            const songId = req.body.songId;

            // Check if the song is in the playlist
            const songIndex = playlist.songs.indexOf(songId);
            if (songIndex !== -1) {
                // Remove the song from the playlist
                playlist.songs.splice(songIndex, 1);
                await playlist.save();

                res.json({ message: 'Song removed from Queue.' });
            } else {
                res.status(400).json({ message: 'Song is not in Queue.' });
            }
        } catch (error) {
            console.error('Error removing song from Queue:', error);
            res.status(500).json({ error: 'Internal Server Error' });
        }
    });

    </script>
</body>

</html>